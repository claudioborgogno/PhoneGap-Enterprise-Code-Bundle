#%RAML 0.8
title: Tasker Backend
documentation:
    - title: "About Tasker Backend API"
      content: |
        The Tasker Backend API is a simple example of how to build a backend using RAML
        and Node.JS, connected to an Oracle Database back-end.
    - title: "License"
      content: |
          Copyright (c) 2014 Packt Publishing

          Permission is hereby granted, free of charge, to any person obtaining a copy of this
          software and associated documentation files (the "Software"), to deal in the Software
          without restriction, including without limitation the rights to use, copy, modify,
          merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
          permit persons to whom the Software is furnished to do so, subject to the following
          conditions:
          The above copyright notice and this permission notice shall be included in all copies
          or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
          INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
          PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
          LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
          OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
          OTHER DEALINGS IN THE SOFTWARE.
baseUri: https://pge-as.acmecorp.com
mediaType: application/json
protocols: [ HTTPS ]
securitySchemes:
    - taskerAuth: !include ./securitySchema/taskerAuthSchema.raml
schemas:
   - loginRequest: !include ./schemas/loginRequest.json
   - person: !include ./schemas/person.json
   - task: !include ./schemas/task.json
   - comment: !include ./schemas/taskComment.json
   - user: !include ./schemas/user.json
securedBy: [ taskerAuth ]    
traits:
   - pageable: !include ./traits/pageable.raml
   - secured: !include ./traits/taskerAuth.raml
resourceTypes:
   - collection: !include ./resourceTypes/collection.raml
   - collectionItem: !include ./resourceTypes/collectionItem.raml
/:
  securedBy: [null]
  description: |
    This endpoint the discovery point for the API in order to reflect the hypermedia API.
    The links that are returned in the request indicate the authorization point and any
    other endpoints that might be of use.
  get:
    securedBy: [null]
    description: |
      Returns the links that might be interesting as well as the authorization point.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "_links": {
                  "authorize": {
                    "template": "/auth",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "POST",
                    "title": "Authorize" },
                  "deauthorize": {
                    "template": "/auth",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "DELETE",
                    "title": "Deauthorize" },
                  "get-people-list": {
                    "template": "/person{?personId,userId,administeredBy}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Get People" },
                  "add-person": {
                    "template": "/person",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "POST",
                    "title": "Add person" },
                  "get-person": {
                    "template": "/person/{personId}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Person Profile" },
                  "update-person": {
                    "template": "/person/{personId}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "PUT",
                    "title": "Update Person Profile" },
                  "get-tasks": {
                    "template": "/task{?ownedBy,assignedTo,status,lowestCompletion,highestCompletion}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Tasks" },
                  "add-task": {
                    "template": "/task",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "POST",
                    "title": "Add Task" },
                  "get-task": {
                    "template": "/task/{taskId}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Task Details" },
                  "update-task": {
                    "template": "/task/{taskId}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "PUT,PATCH",
                    "title": "Modify Task Details" },
                  "get-task-comments": {
                    "template": "/task/{taskId}/comments",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Task Comments" },
                  "add-task-comment": {
                    "template": "/task/{taskId}/comments",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "POST",
                    "title": "Add Comment to Task" },
                  "get-task-comment": {
                    "template": "/task/{taskId}/comments/{commentId}",
                    "type": "application/json",
                    "accept": "application/json",
                    "allow": "GET",
                    "title": "Task Comment" }
                }
              }
/person:
  is: [secured]
  description: |
    A `person` is a representation of an individual in the Tasker system. It contains
    a link to their `user` record via `userId` as well as their name and avatar. It also
    enables one to recreate the administrative structure by indicating who is administered
    by whom.

    Unless granted explicitly, users can only assign to employees they themselves manage (or
    in other words, employees can only be assigned tasks by their direct administrator).
  type: 
    collection:
      exampleCollection: !include ./examples/personExampleCollection.json
      exampleItem: !include ./examples/personExample.json
  get:
    description: |
      Returns a list of individuals based on the specified criteria. If one wishes to
      obtain the record knowing only their `userId`, one can do so. Alternatively, if
      one needs to obtain a list of employees managed by a specific administrator, that
      is also possible.

      *Security*: There are no security restrictions on this information; it is assumed
      that the company's administrative hierarchy is public knowledge. Therefore a request
      with no parameters at all will return a list of all individuals in the system.
    is: [ pageable, secured ]
    queryParameters:
      personId:
        description: The unique identifier for the individual
        required: false
        type: integer
        example: 2
        default: null
      userId:
        description: The user id for the individual (login name)
        required: false
        type: string
        example: bsmith
        default: nul
      administeredBy:
        description: The specific administrator in question
        required: false
        type: integer
        example: 1
        default: null
  post:
    description: |
      Creates a new individual based and associates them with the provided `userId`. The
      `userId` must exist or a 404 is returned.

      User must have `CAN_CREATE_PERSON` rights; otherwise a 403 is returned.
    is: [ secured ]
    responses:
      404:
        body:
          application/json:
            example: |
              { "message": "User ID does not exist; person not created." }
  /{personId}:
    description: |
      View / edit a specific individual, given the `personId`.
    is: [secured]
    type:
      collectionItem:
        exampleItem: !include ./examples/personExample.json
    uriParameters:
      personId:
        description: unique internal person ID.
        type: integer
        required: true
    get:
      is: [ secured ]
      description: |
        Retrieve information about a specific individual. 
    put:
      is: [ secured ]
      description: |
        Update information for a specific individual. User must have `CAN_MODIFY_PERSON_ rights
        or a 403 will be returned.
/task:
  is: [secured]
  type:
    collection:
      exampleCollection: !include ./examples/taskExampleCollection.json
      exampleItem: !include ./examples/taskExample.json
  description: |
    Tasks contain a `title` and a `description` as well as a `status` and a `pct_complete`
    field. The security on a task is governed by the `owner` and the `assigned_to` field.
  get:
    description: |
      Retrieve a list of tasks based upon the specified criteria. Tasks returned will
      fall into the user's security roles. Therefore if a user can see all tasks, querying
      this with no query parameters will cause a return of all tasks in the system. If a user
      can only see their own and assigned tasks, no query parameters will return a list of
      tasks that the user owns or is assigned.
    is: [ secured, pageable ]
    queryParameters:
      ownedBy:
        description: Owner of task
        required: false
        default: null
        type: integer
        example: 1
      assignedTo:
        description: Individual to which task is assigned
        required: false
        default: null
        type: integer
        example: 2
      status:
        description: | 
          Retrieve tasks with specified status.

          Valid status types are `I`n progress, On `H`old, `C`omplete, `X` deleted.
        required: false
        default: null
        type: string
        example: I
        enum: [ "I", "H", "C", "X" ]
      lowestCompletion:
        description: Return tasks with a % complete higher or equal to this value
        required: false
        default: 0
        type: number
        example: 25.0
      highestCompletion:
        description: Return tasks with a % complete lower or equal to this value
        required: false
        default: 100
        type: number
        example: 75.0   
  post:
    description: |
      Create a new task with the specified values. The user must have rights to
      create their own tasks if the owner matches the user's id, or they must have
      rights to create any tasks if the owner does not match. If the user does not
      have the proper rights, a 403 is returned.
    is: [secured]
  /{taskId}:
    is: [secured]
    description: |
      View / edit a specific task, given the `taskId`.
    uriParameters:
      taskId:
        description: ID for specific task.
        type: integer
        required: true
    type:
      collectionItem:
        exampleItem: !include ./examples/taskExample.json
    get:
      is: [ secured, pageable]
      description: |
        Retrieve a task with the specific `taskId`. If user does not have appropriate
        security rights to see the task, 403 is returned.
    put:
      is: [ secured ]
      description: |
        Update a task with data. Requires `CAN_MODIFY_OWN|ANY_TASK` or 403 will be returned.
    patch:
      is: [secured ]
      description: |
        Update a task with specific data. Used to update percent complete or status values.
        Requires `CAN_UPD_PROGRESS|STATUS_ON_ASGND_TASK` or `CAN_MODIFY_OWN|ANY_TASK` or 403
        will be returned.
    /comments:
      is: [secured]
      type: 
        collection:
          exampleCollection: !include ./examples/taskCommentExampleCollection.json
          exampleItem: !include ./examples/taskCommentExample.json
      get:
        is: [secured, pageable]
        description: |
          Returns the comments for the given task. If the user does not have access to see
          the task, 403 is returned.
      post:
        is: [secured]
        description: |
          Create a new comment for the given task. If the user does not have access to 
          `COMMENT_ON_ANY|OWN|ASSIGNED_TASK`, 403 is returned.
      /{commentId}:
        is: [secured]
        type:
          collectionItem:
            exampleItem: !include ./examples/taskCommentExample.json
        get:
          is: [secured]
          description: |
            Returns the comment for the specified task with the specified comment ID.
/auth:
  description: |
    Session management. Send a `post` to request an authorization token that can be
    utilized from that point forward. Send a `delete` to log the user out and immediately
    expire any active authorization token.
  post:
    description: |
      Authenticate a user in order to obtain the first authorization token.
    securedBy: [ null ]
    body:
      application/json:
        schema: loginRequest
        example: |
          {
            "userId": "bsmith",
            "candidatePassword": "password"
          }
    responses:
      200:
        headers:
          auth_token:
            example: C5E328473918391C19384FDEC9381CCF231028491
        body:
          application/json:
            example: |
              { "message": "User successfully authenticated.",
                "code": "OK000"
              }
      401:
        body:
          application/json:
            example: |
              { "message": "Invalid username or password; access denied.",
                "code": "AU001" }
  delete:
    description: |
      Log a user out, based on their authentication token. The token is immediately
      rendered invalid, and future requests must be re-authenticated.
    responses:
      200:
        body:
          application/json:
            example: |
              { "message": "User logged out.",
                "code": "OK001" }
